/*
 * Licensed Materials - Property of IBM
 * "Restricted Materials of IBM"
 * 5746-SM2
 * Copyright IBM Corp. 2003, 2008 All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */

package tools.print.lib;

import java.io.IOException;
//import java.net.*;
//import java.io.*;
import java.util.*;
import java.sql.*;
import javax.mail.*;
import javax.mail.internet.*;
//import javax.sql.*;
//import tools.print.printer.*;

/****************************************************************************************
 * SendMail	
 * 	
 * @author: Joe Comfort	
 * Copyright IBM
 * 
 * This class contains several different methods to easily send emails and pages.
 ****************************************************************************************/
public class SendMail {
	
	private static ResourceBundle myResources = ResourceBundle.getBundle("tools.print.lib.SendMail");
	AppTools appTool = new AppTools();
	       
	/********************************************************************************************
	* sendMail										       										*
	*											       											*
	* This method takes 3 strings (subject, message, and email recipient) and a PrintWriter.	*
	* It will send an email with the information provided to it.								*
	********************************************************************************************/
	public boolean sendMail(String sTo, String sSubject, String sMessage, String sFromInternetAddress, String sFromName)
	throws IOException {
		
		boolean result = true;
					
		String sMessageToSend = ("********************************************************\n* THIS EMAIL WAS GENERATED BY A SERVICE REQUEST MACHINE *\n* PLEASE DO NOT REPLY TO THIS EMAIL                     *\n********************************************************\n\n");
		sMessageToSend = (sMessageToSend + sMessage);
		String sSmtpHost = myResources.getString("smtphost");
					
		Properties props = new Properties();
		props.put("mail.smtp.host", sSmtpHost);
		Session session = Session.getDefaultInstance(props, null);
		MimeMessage message = new MimeMessage(session);
		String aTo[] = new String[10];
		int j = 0;
		try {
		    
			int curr = 0;
			int last = 0;
			j = 0;
			for (int i = 0; i < sTo.length(); i++) {
				if(sTo.charAt(i) == (';') || sTo.charAt(i) == (',')) {
					if (sTo.substring(last,curr).length() > 6 && sTo.substring(last,curr).indexOf('@') > 0) {
						aTo[j] = sTo.substring(last,curr);
						j++;
					}
					last = curr + 1;
					curr++;
				} else if (i == (sTo.length()-1)) {
					aTo[j] = sTo.substring(last,sTo.length());
					j++;
				} else {
					curr++;
				}
			}
			if (j==0) {
				aTo[j] = sTo;
			}
			InternetAddress[] aToArray = new InternetAddress[j];
			for (int x = 0; x < j; x++) {
				aToArray[x] = new InternetAddress(aTo[x]);
			}
			
			message.setFrom(new InternetAddress(sFromInternetAddress, sFromName));
			//message.addRecipient(Message.RecipientType.TO, new InternetAddress(sTo));
			message.setRecipients(Message.RecipientType.TO, aToArray);
			message.setSubject(sSubject);
			message.setText(sMessageToSend);
    		
			Transport.send(message);

		} catch (Exception mex) {
			result = false;
			System.out.println("GPWS Error in SendMail.sendMail.1 ERROR: " + mex);
			try {
				appTool.logError("SendMail.sendMail","Keyop", mex);
			} catch (Exception ex) {
				System.out.println("GPWS Error in SendMail.sendMail.2 ERROR: " + ex);
			}
		}
		
		if (result == false) {
			
			String sSmtpHost2 = myResources.getString("smtphost2");
			props.put("mail.smtp.host", sSmtpHost2);
			session = Session.getDefaultInstance(props, null);
			message = new MimeMessage(session);
			InternetAddress[] aToArray = new InternetAddress[j];
		
			try {
				for (int x = 0; x < j; x++) {
					aToArray[x] = new InternetAddress(aTo[x]);
				}
				message.setFrom(new InternetAddress(sFromInternetAddress, sFromName));
				//message.addRecipient(Message.RecipientType.TO, new InternetAddress(sTo));
				message.setRecipients(Message.RecipientType.TO, aToArray);
				message.setSubject(sSubject);
				message.setText(sMessageToSend);
    			Transport.send(message);

			} catch (Exception mex) {
				result = false;
				System.out.println("GPWS Error in SendMail.sendMail.3 ERROR: " + mex);
				try {
					appTool.logError("SendMail.sendMail","Keyop", mex);
				} catch (Exception ex) {
					System.out.println("GPWS Error in SendMail.sendMail.4 ERROR: " + ex);
				}
			}
		}
		
		return result;
	}
    
    /********************************************************************************************
    * sendMail										       										*
    *											       											*
    * This method takes 3 strings (subject, message, and email recipient) and a PrintWriter.	*
    * It will send an email with the information provided to it.								*
    ********************************************************************************************/
    public boolean sendMail(String sTo, String sSubject, String sMessage)
	throws IOException {
		
		boolean result = true;
		String[] sEmailInfo = new String[4];
		try {
			sEmailInfo = getMailInfo();
		} catch (Exception e) {
			System.out.println("GPWS Error getting EmailInfo in SendMail.sendMail.0 ERROR: " + e);
			try {
				appTool.logError("SendMail.sendMail.0","Keyop", e);
			} catch (Exception ex) {
				System.out.println("GPWS Error getting EmailInfo in SendMail.SendMail ERROR: " + ex);
			}
		}
				
		//String sSmtpHost = myResources.getString("smtphost");
		String sSmtpHost = sEmailInfo[2];
		Properties props = new Properties();
		props.put("mail.smtp.host", sSmtpHost);
		Session session = Session.getDefaultInstance(props, null);
		MimeMessage message = new MimeMessage(session);
		String aTo[] = new String[10];
		String sMessageToSend = ("********************************************************\n* THIS EMAIL WAS GENERATED BY A SERVICE REQUEST MACHINE *\n* PLEASE DO NOT REPLY TO THIS EMAIL                     *\n********************************************************\n\n");
		sMessageToSend = (sMessageToSend + sMessage);
		int j = 0;		
		try {
			
			int curr = 0;
			int last = 0;
			j = 0;
			for (int i = 0; i < sTo.length(); i++) {
				if(sTo.charAt(i) == (';') || sTo.charAt(i) == (',')) {
					if (sTo.substring(last,curr).length() > 6 && sTo.substring(last,curr).indexOf('@') > 0) {
						aTo[j] = sTo.substring(last,curr);
						j++;
					}
					last = curr + 1;
					curr++;
				} else if (i == (sTo.length()-1)) {
					aTo[j] = sTo.substring(last,sTo.length());
					j++;
				} else {
					curr++;
				}
			}
			if (j==0) {
				aTo[j] = sTo;
			}
			InternetAddress[] aToArray = new InternetAddress[j];
			for (int x = 0; x < j; x++) {
				aToArray[x] = new InternetAddress(aTo[x]);
			}
						
    		message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
			message.setRecipients(Message.RecipientType.TO, aToArray);
    		message.setSubject(sSubject);
    		message.setText(sMessageToSend);
    		
    		Transport.send(message);

		} catch (Exception mex) {
	    	result = false;
	    	System.out.println("GPWS Error in SendMail.sendMail.1 ERROR: " + mex);
	    	try {
	    		appTool.logError("SendMail.sendMail.1","Keyop", mex);
	   		} catch (Exception ex) {
	   			System.out.println("GPWS Error in SendMail.sendMail.2 ERROR: " + ex);
	   		}
		}
		
		if (result == false) {
			
			//String sSmtpHost2 = myResources.getString("smtphost2");
			String sSmtpHost2 = sEmailInfo[3];
			props.put("mail.smtp.host", sSmtpHost2);
			session = Session.getDefaultInstance(props, null);
			message = new MimeMessage(session);
			InternetAddress[] aToArray = new InternetAddress[j];
			
			try {
				for (int x = 0; x < j; x++) {
					aToArray[x] = new InternetAddress(aTo[x]);
				}
				message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
				message.setRecipients(Message.RecipientType.TO, aToArray);
				message.setSubject(sSubject);
				message.setText(sMessageToSend);
				Transport.send(message);

			} catch (Exception mex) {
				result = false;
				System.out.println("GPWS Error in SendMail.sendMail.3 ERROR: " + mex);
				try {
					appTool.logError("SendMail.sendMail.2","Keyop", mex);
				} catch (Exception ex) {
					System.out.println("GPWS Error in SendMail.sendMail.4 ERROR: " + ex);
				}
			}
		}
		return result;
	}
	
	/********************************************************************************************
    * sendMail										       										*
    *											       											*
    * This method takes 3 strings (subject, message, and email recipient) and a PrintWriter.	*
    * It will send an email with the information provided to it.								*
    ********************************************************************************************/
    public boolean sendMail(Object[] aTo, String sSubject, String sMessage)
	throws IOException {

		boolean result = true;
		String[] sEmailInfo = new String[4];
		try {
			sEmailInfo = getMailInfo();
		} catch (Exception e) {
			System.out.println("GPWS Error getting EmailInfo in SendMail.sendMail.0 ERROR: " + e);
			try {
				appTool.logError("SendMail.sendMail.0","Keyop", e);
			} catch (Exception ex) {
				System.out.println("GPWS Error getting EmailInfo in SendMail.SendMail ERROR: " + ex);
			}
		}
			
			String sMessageToSend = ("********************************************************\n* THIS EMAIL WAS GENERATED BY A SERVICE REQUEST MACHINE *\n* PLEASE DO NOT REPLY TO THIS EMAIL                     *\n********************************************************\n\n");
			sMessageToSend = (sMessageToSend + sMessage);
		
			//String sSmtpHost = myResources.getString("smtphost");
			String sSmtpHost = sEmailInfo[2];
			InternetAddress[] aToArray = new InternetAddress[aTo.length];
		try {
			for (int x = 0; x < aTo.length; x++) {
				aToArray[x] = new InternetAddress((String)aTo[x]);
			}
		} catch (Exception e) {
			System.out.println("SendMail method: sendMail ERROR0: " + e);
			try {
				appTool.logError("SendMail.sendMail.1","Keyop", e);
	   		} catch (Exception ex) {
	   			System.out.println("GPWS Error in SendMail.sendMail.1 ERROR: " + ex);
	   		}
		}
		
			Properties props = new Properties();
    		props.put("mail.smtp.host", sSmtpHost);
    		Session session = Session.getDefaultInstance(props, null);
			MimeMessage message = new MimeMessage(session);
		
		try {
		     		
    		message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
    		message.setRecipients(Message.RecipientType.TO, aToArray);
    		message.setSubject(sSubject);
    		message.setText(sMessageToSend);
    		
    		Transport.send(message);

		} catch (Exception mex) {
	    	result = false;
	    	System.out.println("GPWS Error in SendMail.sendMail.1 ERROR: " + mex);
	    	try {
	    		appTool.logError("SendMail.sendMail.2","Keyop", mex);
	   		} catch (Exception ex) {
	   			System.out.println("GPWS Error in SendMail.sendMail.2 ERROR: " + ex);
	   		}
		}
		
		if (result == false) {
			
			//String sSmtpHost2 = myResources.getString("smtphost2");
			String sSmtpHost2 = sEmailInfo[3];
			props.put("mail.smtp.host", sSmtpHost2);
			session = Session.getDefaultInstance(props, null);
			message = new MimeMessage(session);
		
			try {
		     		
				message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
				message.setRecipients(Message.RecipientType.TO, aToArray);
				message.setSubject(sSubject);
				message.setText(sMessageToSend);
    		
				Transport.send(message);

			} catch (Exception mex) {
				result = false;
				System.out.println("GPWS Error in SendMail.sendMail.3 ERROR: " + mex);
				try {
					appTool.logError("SendMail.sendMail.2","Keyop", mex);
				} catch (Exception ex) {
					System.out.println("GPWS Error in SendMail.sendMail.4 ERROR: " + ex);
				}
			}
		}
		
		return result;
	}
	
	/********************************************************************************************
    * sendMail										       										*
    *											       											*
    * This method takes 3 strings (subject, message, and email recipient) and a PrintWriter.	*
    * It will send an email with the information provided to it.								*
    ********************************************************************************************/
    public boolean sendMail(String sTo, String sCC, String sSubject, String sMessage)
	throws IOException {

		boolean result = true;
		String[] sEmailInfo = new String[4];
		try {
			sEmailInfo = getMailInfo();
		} catch (Exception e) {
			System.out.println("GPWS Error getting EmailInfo in SendMail.sendMail.0 ERROR: " + e);
			try {
				appTool.logError("SendMail.sendMail.0","Keyop", e);
			} catch (Exception ex) {
				System.out.println("GPWS Error getting EmailInfo in SendMail.SendMail ERROR: " + ex);
			}
		}		
		
			String sMessageToSend = ("********************************************************\n* THIS EMAIL WAS GENERATED BY A SERVICE REQUEST MACHINE *\n* PLEASE DO NOT REPLY TO THIS EMAIL                     *\n********************************************************\n\n");
			sMessageToSend = (sMessageToSend + sMessage);
		
			//String sSmtpHost = myResources.getString("smtphost");
			String sSmtpHost = sEmailInfo[2];
			
			Properties props = new Properties();
    		props.put("mail.smtp.host", sSmtpHost);
    		Session session = Session.getDefaultInstance(props, null);
			MimeMessage message = new MimeMessage(session);
			String aTo[] = new String[10];
			String aCC[] = new String[10];
			int j = 0;
		try {
			
			int curr = 0;
			int last = 0;
			j = 0;
			for (int i = 0; i < sTo.length(); i++) {
				if(sTo.charAt(i) == (';') || sTo.charAt(i) == (',')) {
					if (sTo.substring(last,curr).length() > 6 && sTo.substring(last,curr).indexOf('@') > 0) {
						aTo[j] = sTo.substring(last,curr);
						j++;
					}
					last = curr + 1;
					curr++;
				} else if (i == (sTo.length()-1)) {
					aTo[j] = sTo.substring(last,sTo.length());
					j++;
				} else {
					curr++;
				}
			}
			if (j==0) {
				aTo[j] = sTo;
			}
			InternetAddress[] aToArray = new InternetAddress[j];
			for (int x = 0; x < j; x++) {
				aToArray[x] = new InternetAddress(aTo[x]);
			}
			
			curr = 0;
			last = 0;
			j = 0;
			for (int i = 0; i < sCC.length(); i++) {
				if(sCC.charAt(i) == (';') || sCC.charAt(i) == (',')) {
					if (sCC.substring(last,curr).length() > 6 && sCC.substring(last,curr).indexOf('@') > 0) {
						aCC[j] = sCC.substring(last,curr);
						j++;
					}
					last = curr + 1;
					curr++;
				} else if (i == (sCC.length()-1)) {
					aCC[j] = sCC.substring(last,sCC.length());
					j++;
				} else {
					curr++;
				}
			}
			if (j==0) {
				aCC[j] = sCC;
			}
			InternetAddress[] aCCArray = new InternetAddress[j];
			for (int x = 0; x < j; x++) {
				aCCArray[x] = new InternetAddress(aCC[x]);
			}
		     		
    		message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
    		//message.addRecipient(Message.RecipientType.TO, new InternetAddress(sTo));
    		message.setRecipients(Message.RecipientType.TO, aToArray);
    		//message.addRecipient(Message.RecipientType.CC, new InternetAddress(sCC));
    		message.setRecipients(Message.RecipientType.CC, aCCArray);
    		message.setSubject(sSubject);
    		message.setText(sMessageToSend);
    		
    		Transport.send(message);

		} catch (Exception mex) {
	    	result = false;
	    	System.out.println("GPWS Error in SendMail.sendMail.1 ERROR: " + mex);
	    	try {
	    		appTool.logError("SendMail.sendMail.1","Keyop", mex);
	   		} catch (Exception ex) {
	   			System.out.println("GPWS Error in SendMail.sendMail.2 ERROR: " + ex);
	   		}
		}
		
		if (result == false) {
			
			//String sSmtpHost2 = myResources.getString("smtphost2");
			String sSmtpHost2 = sEmailInfo[3];
			props.put("mail.smtp.host", sSmtpHost2);
			session = Session.getDefaultInstance(props, null);
			message = new MimeMessage(session);
			InternetAddress[] aToArray = new InternetAddress[j];
			InternetAddress[] aCCArray = new InternetAddress[j];
		
			try {
				for (int x = 0; x < j; x++) {
					aToArray[x] = new InternetAddress(aTo[x]);
				}
				for (int x = 0; x < j; x++) {
					aCCArray[x] = new InternetAddress(aCC[x]);
				}
				message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
				//message.addRecipient(Message.RecipientType.TO, new InternetAddress(sTo));
				message.setRecipients(Message.RecipientType.TO, aToArray);
				//message.addRecipient(Message.RecipientType.CC, new InternetAddress(sCC));
				message.setRecipients(Message.RecipientType.CC, aCCArray);
				message.setSubject(sSubject);
				message.setText(sMessageToSend);
    		
				Transport.send(message);

			} catch (Exception mex) {
				result = false;
				System.out.println("GPWS Error in SendMail.sendMail.3 ERROR: " + mex);
				try {
					appTool.logError("SendMail.sendMail.2","Keyop", mex);
				} catch (Exception ex) {
					System.out.println("GPWS Error in SendMail.sendMail.4 ERROR: " + ex);
				}
			}
		}
		
		return result;
	}
	
	/********************************************************************************************
    * sendPage										       										*
    *											       											*
    * This method takes 3 strings (subject, message, and email recipient) and a PrintWriter.	*
    * It will send an email with the information provided to it.								*
    ********************************************************************************************/
    public boolean sendPage(String sTo, String sSubject, String sMessage)
	throws IOException {

		boolean result = true;
		String[] sEmailInfo = new String[4];
		try {
			sEmailInfo = getMailInfo();
		} catch (Exception e) {
			System.out.println("GPWS Error getting EmailInfo in SendMail.sendMail.0 ERROR: " + e);
			try {
				appTool.logError("SendMail.sendMail.0","Keyop", e);
			} catch (Exception ex) {
				System.out.println("GPWS Error getting EmailInfo in SendMail.SendMail ERROR: " + ex);
			}
		}
		
			//String sSmtpHost = myResources.getString("smtphost");
			String sSmtpHost = sEmailInfo[2];
					
			Properties props = new Properties();
    		props.put("mail.smtp.host", sSmtpHost);
    		Session session = Session.getDefaultInstance(props, null);
			MimeMessage message = new MimeMessage(session);
		
		try {
		     		
    		message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
    		message.addRecipient(Message.RecipientType.TO, new InternetAddress(sTo));
    		message.setSubject(sSubject);
    		message.setText(sMessage);
    		
    		Transport.send(message);

		} catch (Exception mex) {
	    	result = false;
	    	System.out.println("GPWS Error in SendMail.sendPage ERROR: " + mex);
	    	try {
	    		appTool.logError("SendMail.sendPage.1","Keyop", mex);
	   		} catch (Exception ex) {
	   			System.out.println("GPWS Error in SendMail.sendPage.2 ERROR: " + ex);
	   		}
		}
		
		if (result == false) {
			
			//String sSmtpHost2 = myResources.getString("smtphost2");
			String sSmtpHost2 = sEmailInfo[3];
						
			props.put("mail.smtp.host", sSmtpHost2);
			session = Session.getDefaultInstance(props, null);
			message = new MimeMessage(session);
		
			try {
		     		
				message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
				message.addRecipient(Message.RecipientType.TO, 
				new InternetAddress(sTo));
				message.setSubject(sSubject);
				message.setText(sMessage);
    		
				Transport.send(message);

			} catch (Exception mex) {
				result = false;
				System.out.println("GPWS Error in SendMail.sendPage.3 ERROR: " + mex);
				try {
					appTool.logError("SendMail.sendPage.2","Keyop", mex);
				} catch (Exception ex) {
					System.out.println("GPWS Error in SendMail.sendPage.4 ERROR: " + ex);
				}
			}
		}
		
		return result;
	}
	
	/********************************************************************************************
	* sendPage										       										*
	*											       											*
	* This method takes 3 strings (subject, message, and email recipient) and a PrintWriter.	*
	* It will send an email with the information provided to it.								*
	********************************************************************************************/
	public boolean sendPage(String sTo, String sMessage) throws IOException {

		boolean result = true;
		String[] sEmailInfo = new String[4];
		try {
			sEmailInfo = getMailInfo();
		} catch (Exception e) {
			System.out.println("GPWS Error getting EmailInfo in SendMail.sendMail.0 ERROR: " + e);
			try {
				appTool.logError("SendMail.sendMail.0","Keyop", e);
			} catch (Exception ex) {
				System.out.println("GPWS Error getting EmailInfo in SendMail.SendMail ERROR: " + ex);
			}
		}
		
			//String sSmtpHost = myResources.getString("smtphost");
			String sSmtpHost = sEmailInfo[2];
		
			Properties props = new Properties();
			props.put("mail.smtp.host", sSmtpHost);
			Session session = Session.getDefaultInstance(props, null);
			MimeMessage message = new MimeMessage(session);
		
		try {
		     		
			message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(sTo));
			message.setText(sMessage);
    		
			Transport.send(message);

		} catch (Exception mex) {
			result = false;
			System.out.println("GPWS Error in SendMail.sendPage.1 ERROR: " + mex);
			try {
				appTool.logError("SendMail.sendPage.1","Keyop", mex);
			} catch (Exception ex) {
				System.out.println("GPWS Error in SendMail.sendPage.2 ERROR: " + ex);
			}
		}
		
		if (result == false) {
			
			//String sSmtpHost2 = myResources.getString("smtphost2");
			String sSmtpHost2 = sEmailInfo[3];
			props.put("mail.smtp.host", sSmtpHost2);
			session = Session.getDefaultInstance(props, null);
			message = new MimeMessage(session);
			try {
		     		
				message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
				message.addRecipient(Message.RecipientType.TO, 
				new InternetAddress(sTo));
				message.setText(sMessage);
    		
				Transport.send(message);

			} catch (Exception mex) {
				result = false;
				System.out.println("GPWS Error in SendMail.sendPage.3 ERROR: " + mex);
				try {
					appTool.logError("SendMail.sendPage.2","Keyop", mex);
				} catch (Exception ex) {
					System.out.println("GPWS Error in SendMail.sendPage.4 ERROR: " + ex);
				}
			}
		}
		return result;
	}
	
	/********************************************************************************************
	* sendPage										       										*
	*											       											*
	* This method takes 3 strings (subject, message, and email recipient) and a PrintWriter.	*
	* It will send an email with the information provided to it.								*
	********************************************************************************************/
	public boolean sendPage(Object[] aTo, String sMessage)
	throws IOException {

		boolean result = true;
		String[] sEmailInfo = new String[4];
		try {
			sEmailInfo = getMailInfo();
		} catch (Exception e) {
			System.out.println("GPWS Error getting EmailInfo in SendMail.sendMail.0 ERROR: " + e);
			try {
				appTool.logError("SendMail.sendMail.0","Keyop", e);
			} catch (Exception ex) {
				System.out.println("GPWS Error getting EmailInfo in SendMail.SendMail ERROR: " + ex);
			}
		}
		
			//String sSmtpHost = myResources.getString("smtphost");
			String sSmtpHost = sEmailInfo[2];
					
			Properties props = new Properties();
			props.put("mail.smtp.host", sSmtpHost);
			Session session = Session.getDefaultInstance(props, null);
			MimeMessage message = new MimeMessage(session);
		
		try {
		     		
			message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
			//message.addRecipient(Message.RecipientType.TO, new InternetAddress(sTo));
			InternetAddress[] aToArray = new InternetAddress[aTo.length];
			for (int x = 0; x < aTo.length; x++) {
				aToArray[x] = new InternetAddress((String)aTo[x]);
			}
			message.setRecipients(Message.RecipientType.TO, aToArray);
			message.setText(sMessage);
			Transport.send(message);

		} catch (Exception mex) {
			result = false;
			System.out.println("GPWS Error in SendMail.sendPage.1 ERROR: " + mex);
			try {
				appTool.logError("SendMail.sendPage.1","Keyop", mex);
			} catch (Exception ex) {
				System.out.println("GPWS Error in SendMail.sendPage.2 ERROR: " + ex);
			}
		}
		
		if (result == false) {
			
			//String sSmtpHost2 = myResources.getString("smtphost2");
			String sSmtpHost2 = sEmailInfo[3];
			props.put("mail.smtp.host", sSmtpHost2);
			session = Session.getDefaultInstance(props, null);
			message = new MimeMessage(session);
		
			try {
		     		
				message.setFrom(new InternetAddress(sEmailInfo[0], sEmailInfo[1]));
				InternetAddress[] aToArray = new InternetAddress[aTo.length];
				for (int x = 0; x < aTo.length; x++) {
					aToArray[x] = new InternetAddress((String)aTo[x]);
				}
				message.setRecipients(Message.RecipientType.TO, aToArray);
				message.setText(sMessage);
				Transport.send(message);

			} catch (Exception mex) {
				result = false;
				System.out.println("GPWS Error in SendMail.sendPage.3 ERROR: " + mex);
				try {
					appTool.logError("SendMail.sendPage.2","Keyop", mex);
				} catch (Exception ex) {
					System.out.println("GPWS Error in SendMail.sendPage.4 ERROR: " + ex);
				}
			}
		}
		
		return result;
	}
	
	/********************************************************************************************
	* sendMail										       										*
	*											       											*
	* This method takes 3 strings (subject, message, and email recipient) and a PrintWriter.	*
	* It will send an email with the information provided to it.								*
	********************************************************************************************/
	public String[] getMailInfo() throws Exception {
		
		Connection con = null;
		Statement stmtEmail = null;
		ResultSet rsEmail = null;
		String[] sEmailInfo = new String[4];
		String sFromInternetAddress = myResources.getString("fromInternetAddress");
		String sFromName = myResources.getString("fromName");
		String sSmtpHost = myResources.getString("smtphost");
		String sSmtpHost2 = myResources.getString("smtphost2");
					
		try {
			con = appTool.getConnection();
			stmtEmail = con.createStatement();
			rsEmail = stmtEmail.executeQuery("SELECT CATEGORY_CODE, CATEGORY_VALUE1, CATEGORY_VALUE2 FROM GPWS.CATEGORY_VIEW WHERE UPPER(CATEGORY_NAME) = 'EMAILINFO'");
		
			String categorycode = "";
			while (rsEmail.next()) {
				categorycode = rsEmail.getString("CATEGORY_CODE").toUpperCase();
				if (categorycode.equals("FROM_INTERNET_ADDRESS")) sEmailInfo[0] = appTool.nullStringConverter(rsEmail.getString("CATEGORY_VALUE1"));
				if (categorycode.equals("FROM_NAME")) sEmailInfo[1] = appTool.nullStringConverter(rsEmail.getString("CATEGORY_VALUE1"));
				if (categorycode.equals("SMTP_SERVER_1")) sEmailInfo[2] = appTool.nullStringConverter(rsEmail.getString("CATEGORY_VALUE1"));
				if (categorycode.equals("SMTP_SERVER_2")) sEmailInfo[3] = appTool.nullStringConverter(rsEmail.getString("CATEGORY_VALUE1"));
			} //while
		} catch (Exception e) {
			System.out.println("GPWS Error in SendMail.getMailInfo ERROR: " + e);
			try {
				appTool.logError("SendMail.getMailInfo","Keyop", e);
			} catch (Exception ex) {
				System.out.println("GPWS Error in SendMail.getMailInfo ERROR: " + ex);
			}
		} finally {
			try {
				if (rsEmail != null)
					rsEmail.close();
				if (stmtEmail != null)
					stmtEmail.close();
				if (con != null)
					con.close();
			} catch (Exception e){
				System.out.println("GPWS Error in SendMail.getMailInfo.2 ERROR: " + e);
			}
		}
		
		if (sEmailInfo[0] == null || sEmailInfo[0].equals("")) {
			sEmailInfo[0] = sFromInternetAddress;
		}
		if (sEmailInfo[1] == null || sEmailInfo[1].equals("")) {
			sEmailInfo[1] = sFromName;
		}
		if (sEmailInfo[2] == null || sEmailInfo[2].equals("")) {
			sEmailInfo[2] = sSmtpHost;
		}
		if (sEmailInfo[3] == null || sEmailInfo[3].equals("")) {
			sEmailInfo[3] = sSmtpHost2;
		}
		
		return sEmailInfo;
	}
}